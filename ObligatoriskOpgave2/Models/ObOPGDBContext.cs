// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Identity.Client;

namespace ObligatoriskOpgave2.Models
{
    public partial class ObOPGDBContext : DbContext
    {
        string connectionstring = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=ObOPGDB;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";

        private int GetMaxFac(SqlConnection connection)
        {
            #region Get Max Facilitets id
            string queryStringGetMaxFac = "SELECT MAX(Id) FROM Facilitet";
            Console.WriteLine($"SQL command applied : {queryStringGetMaxFac}");

            SqlCommand command = new SqlCommand(queryStringGetMaxFac, connection);
            SqlDataReader reader = command.ExecuteReader();
            int MaxFacId = 0;
            if (reader.Read())
            {
                MaxFacId = reader.GetInt32(0);
            }
            reader.Close();
            Console.WriteLine($"Dette er det største facilitets id {MaxFacId}");
            return MaxFacId;
            #endregion
        }
        private List<Facilitet> ReadAllFaciliteter(SqlConnection connection)

        {
            #region List alle Faciliteter
            Console.WriteLine("Reading all faciliteter");
            string queryString = "SELECT * FROM Facilitet";
            Console.WriteLine($"{queryString}");

            SqlCommand command = new SqlCommand(queryString, connection);
            SqlDataReader reader = command.ExecuteReader();

            List<Facilitet> facilitets = new List<Facilitet>();
            while (reader.Read())
            {
                Facilitet facilitet = new Facilitet()
                {
                    Id = reader.GetInt32(0),
                    Title = reader.GetString(1),
                };
                facilitets.Add(facilitet);
                Console.WriteLine(facilitet);
            }
            reader.Close();
            Console.WriteLine();
            return facilitets;
            #endregion

        }
        private Facilitet GetFacilitet(SqlConnection connection, int Id)
        {
            #region Find facilitet
            Console.WriteLine("calling GetFacilitet");
            string queryStringGetFac = $"SELECT * FROM Facilitet WHERE Id = {Id}";
            Console.WriteLine($"SQL line applied {queryStringGetFac}");

            SqlCommand command = new SqlCommand(queryStringGetFac, connection);
            SqlDataReader reader = command.ExecuteReader();
            Console.WriteLine($"finding facilitet : {Id}");

            Facilitet facilitet = null;
            if (reader.Read())
            {
                facilitet = new Facilitet()
                {
                    Id = reader.GetInt32(0),
                    Title = reader.GetString(1),
                };
                Console.WriteLine($"{facilitet}");
            }
            reader.Close();
            Console.WriteLine();
            return facilitet;
            #endregion
        }
        private int InsertFacilitet(SqlConnection connection, Facilitet facilitet)
        {
            #region Insert Facilitet
            Console.WriteLine("Calling insertFacilitet");
            string insertFacilitetCommandString = $"INSERT INTO Facilitet VALUES ({facilitet.Id}, '{facilitet.Title}')";
            Console.WriteLine($"SQL command used {insertFacilitetCommandString}");
            SqlCommand command = new SqlCommand(insertFacilitetCommandString, connection);

            Console.WriteLine($"Creating facilitet {facilitet.Id}");
            int numberOfRowsAffected = command.ExecuteNonQuery();
            Console.WriteLine($"Number of rows affected: {numberOfRowsAffected}");
            Console.WriteLine();
            return numberOfRowsAffected;
            #endregion
        }
        private int DeleteFacilitet (SqlConnection connection, int id)
        {
            #region DeleteFacilitet
            string deleteCommandString = $"DELETE FROM Facilitet WHERE Id = {id}";
            Console.WriteLine($"SQL applied {deleteCommandString}");
            
            SqlCommand command = new SqlCommand(deleteCommandString, connection);
            Console.WriteLine($"Deleting {id}");
            int numberOfRowsAffected = command.ExecuteNonQuery();
            Console.WriteLine($"Number of rows affected {numberOfRowsAffected}");
            Console.WriteLine();

            return numberOfRowsAffected;
#endregion
        }
        private int UpdateFacilitet(SqlConnection connection, Facilitet facilitet)
        {
            #region Update facilitet
            Console.WriteLine("calling Updatefacilitet");
            string queryStringUpdateFac = $"UPDATE Facilitet SET Title = '{facilitet.Title}' WHERE Id = {facilitet.Id}";
            Console.WriteLine($"SQL line applied {queryStringUpdateFac}");
            
            SqlCommand command = new SqlCommand (queryStringUpdateFac, connection);
            Console.WriteLine($"Updating facilitet #{facilitet.Id}");
            int numberOfRowsAffected = command.ExecuteNonQuery();
            Console.WriteLine($"Number of rows affected : {numberOfRowsAffected}");
            Console.WriteLine();

            return numberOfRowsAffected;

            #endregion
        }

        public ObOPGDBContext()
        {            
            
        }

        public ObOPGDBContext(DbContextOptions<ObOPGDBContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Facilitet> Facilitets { get; set; }
        public virtual DbSet<Hotel> Hotels { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=ObOPGDB;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Facilitet>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.Title).IsFixedLength();
            });

            modelBuilder.Entity<Hotel>(entity =>
            {
                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.HasMany(d => d.Facilitets)
                    .WithMany(p => p.Hotels)
                    .UsingEntity<Dictionary<string, object>>(
                        "HotelFacilitet",
                        l => l.HasOne<Facilitet>().WithMany().HasForeignKey("FacilitetId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__HotelFaci__Facil__29572725"),
                        r => r.HasOne<Hotel>().WithMany().HasForeignKey("HotelId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__HotelFaci__Hotel__286302EC"),
                        j =>
                        {
                            j.HasKey("HotelId", "FacilitetId").HasName("PK__HotelFac__587C74EA5E3AF5CD");

                            j.ToTable("HotelFacilitet");
                        });
            });

            OnModelCreatingPartial(modelBuilder);
        }

        internal void Start()
        {
            using (SqlConnection connection = new SqlConnection(connectionstring))
            {
                connection.Open();
                ReadAllFaciliteter(connection);

                Facilitet newfacilitet = new Facilitet()
                {
                    Id = GetMaxFac(connection) + 1,
                    Title = "Hallo"
                };

                InsertFacilitet(connection, newfacilitet);
                ReadAllFaciliteter(connection);

                //updating the newly added facility
                Facilitet facilitetToBeUpdated = GetFacilitet(connection, newfacilitet.Id);
                facilitetToBeUpdated.Title = "hyggenygge";

                //UpdateFacilitet
                UpdateFacilitet(connection, facilitetToBeUpdated);

                ReadAllFaciliteter(connection);

                Facilitet facilitetToBeDeleted = GetFacilitet(connection, facilitetToBeUpdated.Id);

                DeleteFacilitet(connection, facilitetToBeDeleted.Id);
                ReadAllFaciliteter(connection);
            }

        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}